======================
1-my_list.py
======================

Module defined as MyList that inherits from list

=====================

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

It works when using type()

::

    >>> print(my_list)
    []

It works when addind arguments to the list

::

    >>> my_list = MyList([1, 2, 3])
    >>> print(my_list)
    [1, 2, 3]

TypeError when None argument is in the list

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: 'NoneType' object is not iterable

TypeError when adding more than two arguments

::

    >>> my_list = MyList([1, 2], [3, 4])
    Traceback (most recent call last):
    File "<stdin>", line 1, in <module>
    TypeError: list() takes at most 1 argument (2 given)

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]

It works when adding eleemtne in a given index

::

    >>> my_list[1] = 6
    >>> print(my_list)
    [1, 6, 2, 3, 5]

It works when removing a element using remove function

::

    >>> my_list.remove(6)
    >>> print(my_list)
    [1, 2, 3, 5]

====================

Public instance method defined as print_sorted

=====================

::

    >>> my_list = MyList()
    >>> print(my_list.print_sorted)
    <bound method MyList.print_sorted of []>
